import numpy as np

def exp_board():
    M = make_board()
    # matrix.fill(0)
    x = 1
    for i in range(dim):
        M[i][i]= x
        x += 1
        M[-i][i] = x
    M[1][2] = 5
    print(M)
    return M

def make_board():
    M = np.zeros([dim,dim], dtype=np.int16)
    return M

def find_block(r, c) -> str:
    if dim == 4:
        block = f'{int(r / 2)}{int(c / 2)}'
    elif dim == 9:
        block = f'{int(r / 3)}{int(c / 3)}'
    return block

def block_update(M, r, c):
    block = find_block(r, c)    
    #to do: implement adding information points to correct positions regarding 
    return M


def update(M, r, c):
    #add information points to all elements in corresponding row
    M[r] = M[r] + 1
    #add information points to all elements in corresponding colomn
    M[:, c] = M[:, c] + 1
    #add information points to all elements inside corresponding block
    M = block_update(M, r, c)

    M[r,c] = -10000
    return M

def find_most_info_pos(M):
    highest = M.argmax()

    row = int(highest/dim)
    col =  highest%dim
    return row, col


import random
import timeit



print(int(0.5 / 2))